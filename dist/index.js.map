{"version":3,"sources":["../src/index.js"],"names":["PORT","app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","wss","Server","clients","on","connection","userId","length","newClient","ws","push","console","log","message","filter","client","get","req","res","version","next","people","setInterval","forEach","msg","send","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAJ,IAAII,GAAJ,CAAQ,oBAAK;AACXC,kBAAgB;AADL,CAAL,CAAR;;AAIAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACpBC,SAAO;AADa,CAAhB,CAAR;;AAKAR,IAAIS,GAAJ,GAAU,IAAIC,WAAJ,CAAW;AACnBT,UAAQD,IAAIC;AADO,CAAX,CAAV;;AAIA;AACA,IAAIU,UAAU,EAAd;;AAGAX,IAAIS,GAAJ,CAAQG,EAAR,CAAW,YAAX,EAAyB,UAACC,UAAD,EAAgB;;AAEvC,MAAMC,SAASH,QAAQI,MAAR,GAAiB,CAAhC;AACAF,aAAWC,MAAX,GAAoBA,MAApB;;AAEA,MAAME,YAAY;AAChBC,QAAIJ,UADY;AAEhBC,YAAQA;AAFQ,GAAlB;;AAKAH,UAAQO,IAAR,CAAaF,SAAb;;AAEAG,UAAQC,GAAR,CAAY,mCAAZ,EAAiDN,MAAjD;;AAGAD,aAAWD,EAAX,CAAc,SAAd,EAAyB,UAACS,OAAD,EAAa;;AAEpCF,YAAQC,GAAR,CAAY,gBAAZ,EAA8BC,OAA9B;AAED,GAJD;;AAMAR,aAAWD,EAAX,CAAc,OAAd,EAAuB,YAAM;AAC3BO,YAAQC,GAAR,CAAY,gBAAZ,EAA8BN,MAA9B,EAAsC,iBAAtC;;AAEEH,cAAUA,QAAQW,MAAR,CAAe,UAACC,MAAD;AAAA,aAAYA,OAAOT,MAAP,KAAkBA,MAA9B;AAAA,KAAf,CAAV;AACH,GAJD;AAKD,CA1BD;;AA4BAd,IAAIwB,GAAJ,CAAQ,GAAR,EAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxBA,MAAInB,IAAJ,CAAS;AACPoB,aAASA;AADF,GAAT;AAGD,CAJD;;AAMA3B,IAAIwB,GAAJ,CAAQ,sBAAR,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;AAClD,SAAOF,IAAInB,IAAJ,CAAS;AACdsB,YAAQlB;AADM,GAAT,CAAP;AAGD,CAJD;;AAOAmB,YAAY,YAAM;;AAEhBX,UAAQC,GAAR,gBAAyBT,QAAQI,MAAjC;;AAEA,MAAGJ,QAAQI,MAAR,GAAiB,CAApB,EAAsB;;AAElBJ,YAAQoB,OAAR,CAAgB,UAACR,MAAD,EAAY;;AAE1B;;AAEA,UAAMS,kBAAgBT,OAAOT,MAAvB,2CAAN;;AAEAS,aAAON,EAAP,CAAUgB,IAAV,CAAeD,GAAf;AAED,KARD;AASH;AACD;AACD,CAjBD,EAiBG,IAjBH;;AAmBAhC,IAAIC,MAAJ,CAAWiC,MAAX,CAAkBC,QAAQC,GAAR,CAAYrC,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC9CoB,UAAQC,GAAR,6BAAsCpB,IAAIC,MAAJ,CAAWoC,OAAX,GAAqBC,IAA3D;AACH,CAFD;;kBAIetC,G","file":"index.js","sourcesContent":["import http from 'http'\nimport express from 'express'\nimport cors from 'cors'\nimport morgan from 'morgan'\nimport bodyParser from 'body-parser'\nimport WebSocketServer, {Server} from 'uws'\n\nconst PORT = 8080;\nconst app = express()\napp.server = http.createServer(app)\n\napp.use(morgan('dev'))\n\napp.use(cors({\n  exposedHeaders: '*'\n}))\n\napp.use(bodyParser.json({\n    limit: '50mb'\n}))\n\n\napp.wss = new Server({\n  server: app.server\n})\n\n//Many clients\nlet clients = [];\n\n\napp.wss.on('connection', (connection) => {\n\n  const userId = clients.length + 1\n  connection.userId = userId\n\n  const newClient = {\n    ws: connection,\n    userId: userId,\n  }\n\n  clients.push(newClient)\n\n  console.log('New client connected with userId:', userId);\n\n\n  connection.on('message', (message) => {\n\n    console.log('message from: ', message)\n\n  })\n\n  connection.on('close', () => {\n    console.log('client with Id', userId, 'is disconnected');\n\n      clients = clients.filter((client) => client.userId !== userId)\n  })\n})\n\napp.get('/',(req, res) => {\n  res.json({\n    version: version\n  })\n})\n\napp.get('/api/all_connections', (req, res, next) => {\n  return res.json({\n    people: clients\n  })\n})\n\n\nsetInterval(() => {\n\n  console.log(`there are ${clients.length} people in the connection`)\n\n  if(clients.length > 0){\n\n      clients.forEach((client) => {\n\n        // console.log('client Id', client.userId)\n\n        const msg = `Hey Id ${client.userId}: you got a new message from the sever`\n\n        client.ws.send(msg)\n\n      })\n  }\n  //executed every 3 seconds\n}, 3000)\n\napp.server.listen(process.env.PORT || PORT, () => {\n    console.log(`App is running on port ${app.server.address().port}`)\n})\n\nexport default app\n"]}